/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */
buildscript {
    configurations["classpath"].resolutionStrategy.eachDependency {
        if (requested.group == "org.jooq") {
            useVersion("${project.property('jooq.version')}")
        }
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'idea'
    id "org.flywaydb.flyway" version "7.3.2"
    id "nu.studer.jooq" version "5.2"
    id "io.freefair.lombok" version "5.3.0"
    id 'jacoco'
}

application {
    // Define the main class for the application.
    mainClass = "${project.property('service.name')}.${project.property('service.class')}"

    group = "${project.property('service.name')}"
    archivesBaseName = group

    version = "${project.property('service.version')}"
    mainClassName = "i5.las2peer.tools.L2pNodeLauncher"
    sourceCompatibility = "${project.property('java.version')}"
    targetCompatibility = "${project.property('java.version')}"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.google.code.gson:gson:2.8.6'

    // las2peer bundle which is not necessary in the runtime path
    // compileOnly will be moved into the lib dir afterwards
    compileOnly "i5:las2peer-bundle:${project.property('core.version')}"
    compileOnly "mysql:mysql-connector-java:${project.property('mysql.version')}"
    compileOnly 'org.hibernate:hibernate-validator:5.4.3.Final'
    compileOnly 'org.glassfish:jakarta.el:3.0.3'
    compileOnly 'javax.validation:validation-api:1.1.0.Final'

    // This is for the jooq generation only
    jooqGenerator "mysql:mysql-connector-java:${project.property('mysql.version')}"
    jooqGenerator "org.jooq:jooq-codegen:${project.property('jooq.version')}"
    jooqGenerator "org.jooq:jooq-meta-extensions:${project.property('jooq.version')}"


    // These dependencies are used by the application.
    implementation "org.flywaydb:flyway-core:7.3.2"
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0'
    implementation 'org.slf4j:slf4j-nop:1.7.25'
    implementation 'com.h2database:h2:1.4.191'
    implementation 'org.apache.commons:commons-pool2:2.9.0'
    implementation 'org.apache.commons:commons-dbcp2:2.8.0'
    implementation "org.jooq:jooq:${project.property('jooq.version')}"
    implementation "org.jooq:jooq-meta:${project.property('jooq.version')}"
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'commons-io:commons-io:2.8.0'

    // This clashes with jackson being provided and used by las2peer core
    // (more specifically glassfish jersey), so these versions are tied to each
    // other and may cause issues on las2peer upgrades.
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.9'
}

configurations {
    // This ensures las2peer is available in the tests, but won't be bundled
    testCompile.extendsFrom compileOnly
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
    }
}

jar {
    manifest {
        attributes "Main-Class": "${project.property('service.name')}.${project.property('service.class')}"
        attributes "Library-Version": "${project.property('service.version')}"
        attributes "Library-SymbolicName": "${project.property('service.name')}"
    }

    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        // Exclude signatures to be able to natively bundle signed jars
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

// These two tasks restore the build and runtime environment used
// in the ant environment
task copyJar(type: Copy) {
    from jar // here it automatically reads jar file produced from jar task
    into '../service'
}

// Maybe there is a more idiomatic way to separate out las2peer
task copyToLib(type: Copy) {
    from configurations.compileOnly
    into "../lib"
}

task startscripts {
    new File("$rootDir/bin", "start_network.sh").text = """#!/bin/bash
# this script is autogenerated by 'gradle startscripts'
# it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
# pls execute it from the root folder of your deployment, e. g. ./bin/start_network.sh
java -cp "lib/*" i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService\\(\\'${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}\\'\\) startWebConnector interactive
"""
    new File("$rootDir/bin", "start_network.bat").text = """:: this script is autogenerated by 'gradle startscripts'
:: it starts a las2peer node providing the service '${project.property('service.name')}.${project.property('service.class')}' of this project
:: pls execute it from the bin folder of your deployment by double-clicking on it
%~d0
cd %~p0
cd ..
set BASE=%CD%
set CLASSPATH="%BASE%/lib/*;"
java -cp %CLASSPATH% i5.las2peer.tools.L2pNodeLauncher --port 9011 --service-directory service uploadStartupDirectory startService('${project.property('service.name')}.${project.property('service.class')}@${project.property('service.version')}') startWebConnector interactive
pause
"""
}

build.dependsOn javadoc
build.dependsOn copyJar
build.dependsOn copyToLib
build.dependsOn startscripts


// Flyway and jooq configuration for database management
jooq {
    version = "${project.property('jooq.version')}"
    configurations {
        main {  // name of the jOOQ configuration
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                //jdbc {
                //    driver = 'com.mysql.cj.jdbc.Driver'
                //    url = "jdbc:mysql://${project.property('db.hostname')}:${project.property('db.port')}/${project.property('db.name')}"
                //    user = "${project.property('db.user')}"
                //    password = "${project.property('db.password')}"
                //}
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        //inputSchema = "${project.property('db.name')}"
                        properties {

                            // Specify the location of your SQL script.
                            // You may use ant-style file matching, e.g. /path/**/to/*.sql
                            //
                            // Where:
                            // - ** matches any directory subtree
                            // - * matches any number of characters in a directory / file name
                            // - ? matches a single character in a directory / file name
                            property {
                                key = 'scripts'
                                value = 'src/main/resources/migrations/*.sql'
                            }

                            // The sort order of the scripts within a directory, where:
                            //
                            // - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
                            // - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
                            // - flyway: sorts files the same way as flyway does
                            // - none: doesn't sort directory contents after fetching them from the directory
                            property {
                                key = 'sort'
                                value = 'flyway'
                            }

                            // The default schema for unqualified objects:
                            //
                            // - public: all unqualified objects are located in the PUBLIC (upper case) schema
                            // - none: all unqualified objects are located in the default schema (default)
                            //
                            // This configuration can be overridden with the schema mapping feature
                            property {
                                key = 'unqualifiedSchema'
                                value = 'public'
                            }

                            // The default name case for unquoted objects:
                            //
                            // - as_is: unquoted object names are kept unquoted
                            // - upper: unquoted object names are turned into upper case (most databases)
                            // - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
                            property {
                                key = 'defaultNameCase'
                                value = 'lower'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'de.rwth.dbis.acis.activitytracker.dal.jooq'
                        directory = 'build/generated/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

flyway {
    url = "jdbc:mysql://${project.property('db.hostname')}:${project.property('db.port')}/${project.property('db.name')}"
    user = "${project.property('db.user')}"
    password = "${project.property('db.password')}"
    schemas = ['reqbaztrack']
    // Flyway now uses 'flyway_schema_history' to retain compatibility override this
    table = 'schema_version'
    locations = ["filesystem:$project.projectDir/src/main/resources/migrations"]
}

test.dependsOn flywayMigrate


// Build export directory which can be shipped on request
task export (type: Copy, dependsOn: build) {
    into "$buildDir/export"

    into("service") {
        from jar
    }
    into("lib") {
        from configurations.compileOnly
    }
    into("bin") {
        from "../bin"
    }
    into("etc") {
        from "../etc"
    }
    into("javadoc") {
        from "$buildDir/docs/javadoc"
    }
    into("sql") {
        from processResources
        include "migrations/*.sql"
        rename 'migrations/(.+)', '$1'
    }
}

task packageDistribution(type: Zip, dependsOn: export) {
    archiveFileName = "${project.property('service.class')}.zip"
    destinationDirectory = file("$buildDir/dist")

    from "$buildDir/export"
}

// Cleanup
clean.doLast {
    file("$rootDir/lib").deleteDir()
    file("$rootDir/service").deleteDir()
}

task cleanAll {
    dependsOn "clean"

    doLast {
        file("$rootDir/log").deleteDir()
        file("$projectDir/log").deleteDir()
        file("$rootDir/node-storage").deleteDir()
    }
}
