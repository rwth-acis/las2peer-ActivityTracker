<project name="LAS2peer-ActivityTracker" default="all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <property file="etc/ant_configuration/user.properties"/>
    <property file="etc/ant_configuration/service.properties"/>

    <property name="startup" location="etc/startup"/>

    <presetdef name="javac">
        <javac includeantruntime="false"/>
    </presetdef>

    <property name="src.main" location="src/main"/>
    <property name="src.junit" location="src/test"/>

    <property name="tmp" location="tmp"/>
    <property name="log" location="log"/>
    <property name="service" location="service"/>

    <property name="tmp.classes" location="${tmp}/classes"/>
    <property name="tmp.junit" location="${tmp}/test"/>

    <property name="export" location="export"/>
    <property name="export.doc" location="${export}/doc"/>
    <property name="export.jars" location="${export}/jars"/>
    <property name="junit.report" location="${export}/test_reports"/>

    <property name="lib" location="lib"/>

    <path id="libraries">
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
            <exclude name="junit-*.jar"/>
        </fileset>
    </path>

    <property name="lib.junit" location="${lib}/junit-4.11.jar"/>


    <!-- Ivy Installation (Tool to fetch Libraries) -->
    <property name="ivy.install.version" value="2.3.0"/>
    <property name="ivy.jar.dir" value="${basedir}/etc/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml"/>
    <property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml"/>
    <!-- Download Ivy from Web Site so that it can be used without any special Installation -->
    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true" skipexisting="true"/>
    </target>
    <!-- Try to load Ivy here from local Ivy directory -->
    <target name="install-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>


    <!-- Get Dependencies from our Maven Repository via Ivy -->
    <target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
        <ivy:settings>
            <credentials host="role.dbis.rwth-aachen.de:9911/archiva" realm="Repository internal"/>
        </ivy:settings>
        <ivy:retrieve type="jar, bundle"/>
    </target>


    <!-- Initialization (Folder Creation)-->
    <target name="init_general" depends="clean_before_build">
        <tstamp/>
        <mkdir dir="${tmp}"/>
        <mkdir dir="${export}"/>
        <mkdir dir="${startup}"/>
        <mkdir dir="${log}"/>
    </target>

    <target name="init_compile" depends="init_general, get_deps">
        <mkdir dir="${tmp.classes}"/>
        <mkdir dir="${tmp.junit}"/>
    </target>

    <target name="init_jars" depends="init_general">
        <mkdir dir="${export.jars}"/>
    </target>

    <target name="init_doc" depends="init_general">
        <mkdir dir="${export.doc}"/>
    </target>


    <!-- Compilation -->
    <target name="compile_main" depends="init_compile">
        <javac srcdir="${src.main}"
               destdir="${tmp.classes}"
               classpathref="libraries"
               debug="on"
               encoding="UTF-8"
                />
        <copy todir="${tmp.classes}">
            <fileset dir="${src.main}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="compile_junit" depends="init_compile">
        <javac srcdir="${src.junit}"
               destdir="${tmp.junit}"
               classpath="${tmp.classes}:${lib.junit}"
               classpathref="libraries"
               debug="on"
               encoding="UTF-8"
                />
        <copy todir="${tmp.junit}">
            <fileset dir="${src.junit}">
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <target name="compile_all" depends="compile_main, compile_junit"/>


    <!-- Generate Jars -->
    <target name="jar" depends="compile_main" description="--> jar">
        <jar jarfile="${export.jars}/${service.name}-${service.version}.jar">
            <fileset dir="${tmp.classes}" includes="${service.path}/**"/>
            <manifest>
                <attribute name="Library-Version" value="${service.version}"/>
                <attribute name="Library-SymbolicName" value="${service.name}"/>
            </manifest>
        </jar>
        <!-- Add the same Jar to the Service Directory !-->
        <jar jarfile="${service}/${service.name}-${service.version}.jar">
            <fileset dir="${tmp.classes}" includes="${service.path}/**"/>
            <manifest>
                <attribute name="Library-Version" value="${service.version}"/>
                <attribute name="Library-SymbolicName" value="${service.name}"/>
            </manifest>
        </jar>
    </target>


    <!-- Generate Documentation -->
    <target name="java_doc" depends="init_doc">
        <javadoc destdir="${export.doc}"
                 author="true"
                 version="true"
                 use="true"
                 source="1.7"
                 windowtitle="Service Documentation"
                 failonerror="yes"
                 encoding="utf8"
                 classpath="${tmp.classes}"
                 classpathref="libraries"
                >
            <packageset dir="${src.main}" defaultexcludes="yes">
                <include name="i5/las2peer/**"/>
            </packageset>
        </javadoc>
    </target>


    <!-- JUnit Testing -->
    <target name="junit" depends="junit_tests, junit_clean" description="--> execute all junit tests"/>

    <target name="init_junit" depends="init_general">
        <mkdir dir="${junit.report}"/>
    </target>

    <target name="junit_clean">
        <delete dir="${tmp.junit}"/>
    </target>

    <target name="junit_tests" depends="init_junit, compile_all">
        <junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
            <classpath>
                <pathelement path="${tmp.classes}"/>
                <pathelement path="${tmp.junit}"/>
                <pathelement path="${lib.junit}"/>
                <path refid="libraries"/>
            </classpath>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${junit.report}">
                <fileset dir="${tmp.junit}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>


    <!-- XML Agent Generation (Builds Jar first so that Generator is available)-->

    <target name="generate_configs" depends="jar">
    </target>


    <!-- General Cleanup -->
    <target name="clean_before_build">
        <delete dir="${export}"/>
        <delete file="${service}/${service.name}-${service.version}.jar"/>
    </target>

    <target name="clean_after_build">
        <delete dir="${tmp}"/>
    </target>

    <target name="clean_deps" description="--> remove all dependencies">
        <delete dir="${lib}"/>
    </target>

    <target name="clean_all" depends="clean_after_build, clean_before_build, clean_deps">
        <delete dir="${log}"/>
        <delete dir="node-storage"/>
    </target>

    <target name="all" depends="clean_before_build, generate_configs, junit, java_doc, clean_after_build"/>

    <!-- Run -->
    <target name="run" depends="jar">
        <java classname="i5.las2peer.tools.L2pNodeLauncher"
              classpathref="libraries"
              failonerror="true"
              fork="true">
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5432"/>
            <arg value='-w'/>
            <arg value='-p'/>
            <arg value='9012'/>
            <arg value='uploadStartupDirectory(\"etc/startup\")'/>
            <arg value='startService(\"de.rwth.dbis.acis.activitytracker.service.ActivityTrackerService\",\"SampleServicePass\")'/>
            <arg value='startWebConnector'/>
        </java>
    </target>

</project>
